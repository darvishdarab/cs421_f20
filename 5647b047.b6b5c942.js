(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{105:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return h}));var n=a(3),i=a(7),r=(a(0),a(185)),s={id:"credentials",title:"Credentials storage",sidebar_label:"Credentials Storage"},o={unversionedId:"readings/security/credentials",id:"readings/security/credentials",isDocsHomePage:!1,title:"Credentials storage",description:"When it comes to storing credentials such as passwords in a database, it is centainly not a good idea to store them as plain text. If the database is compromised and some unauthorized outside gets access to it, then all those important data are leaked.",source:"@site/docs\\readings\\security\\credentials.md",slug:"/readings/security/credentials",permalink:"/cs421_f20/docs/readings/security/credentials",editUrl:"https://darvishdarab.github.io/cs421_f20/docs/readings/security/credentials.md",version:"current",sidebar_label:"Credentials Storage",sidebar:"docs",previous:{title:"Cross site scripting",permalink:"/cs421_f20/docs/readings/security/xss"},next:{title:"HTTP vs. HTTPS",permalink:"/cs421_f20/docs/readings/security/http"}},c=[{value:"Encryption",id:"encryption",children:[{value:"Hashing",id:"hashing",children:[]},{value:"Dictionary attack",id:"dictionary-attack",children:[]},{value:"Rainbow Table",id:"rainbow-table",children:[]}]},{value:"Solution",id:"solution",children:[]},{value:"Hashing algorithms",id:"hashing-algorithms",children:[]}],l={rightToc:c};function h(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When it comes to storing credentials such as passwords in a database, it is centainly not a good idea to store them as plain text. If the database is compromised and some unauthorized outside gets access to it, then all those important data are leaked. "),Object(r.b)("p",null,"Storing credentials as plain text not being an option leads us to the idea of storing some ",Object(r.b)("em",{parentName:"p"},"representation")," of them instead of the actual thing. "),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The idea here is that instead of storing the actual passowrd, you would store some representation of it instead. Wheneve the user tries to authenticate herself, the ",Object(r.b)("em",{parentName:"p"},"user-entered")," password is transformed into the utilized representation by the app server before being checked against what is stored in the database. If both representations (the one computed by the app server and the one currently stored in the database) are the same, it is concluded that the entered password is correct."))),Object(r.b)("p",null,"There are two main approaches to create secure representations for credentials: ",Object(r.b)("em",{parentName:"p"},"encryption")," and ",Object(r.b)("em",{parentName:"p"},"hash encryption")," (or simply ",Object(r.b)("em",{parentName:"p"},"hashing"),"). "),Object(r.b)("h2",{id:"encryption"},"Encryption"),Object(r.b)("p",null,"Encryption is the process of ",Object(r.b)("em",{parentName:"p"},"scrambling")," text using a ",Object(r.b)("em",{parentName:"p"},"key")," so it can only be read by the person who has a secret code, or the ",Object(r.b)("em",{parentName:"p"},"decryption key"),". In other words, encryption is the act of encoding plain text into what we call ciphertext, where only authorized parties/entities can decipher the ciphertext back to original."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"It is important to note that encryption is a two-way function, meaning that with the correct key it is possible to decipher the ciphertext and reproduce the original text. This is not a good thing necessarily (and can become a weakness), especially when it comes to storing credentials. The reason is that the app server must have the decryption key so that it can decrypt the encrypted info. An attacker who gets access to the database and steals the encrypted passwords might very well also steal the key."))),Object(r.b)("h3",{id:"hashing"},"Hashing"),Object(r.b)("p",null,"Hashing, on the hand, is a one-way function (i.e. hash function) that scrambles plain text to produce a fixed-size message digest called the hashed massage or simply the hash. "),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Hashing is the preferred approach when it comes to storing credentials in a database. The primary reason is that it is not possible to reveal the actual credentials even if the hashes were revealed, leadig to a better/higher security."))),Object(r.b)("p",null,"It is important to note the followings about hashing",Object(r.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(r.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1")),":"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"The same input text generates the very same hash value, and is the only way that the value can function as a checksum. Is the entered password identical to what\u2019s saved in the database? The system may only grant access if both hash values are the same.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"A hash value should always be unique, so different entries can\u2019t generate the same hash value. Only in this way can the function make sure that the correct password was also entered. Since the number of possible hash values is limited, but the number of possible entries isn\u2019t, such collisions can\u2019t be excluded. Modern hash functions and hashes with a sufficient length minimize the risk as much as possible.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Hash values can\u2019t be recalculated: original content can never be derived from the hash value itself. This is why hash values can\u2019t also be decrypted, as is sometimes vaguely claimed. Instead, hash values can only be comprehended.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Hash functions have to be relatively complex \u2013 but not too complex: to ensure security, an algorithm can\u2019t work too quickly, because that would also make the work easier for attackers. The conversion also shouldn\u2019t be too complex, as it does still need to be applied in practice."))),Object(r.b)("p",null,"Attackers can still have chances against hashes via a variery of attacks such as ",Object(r.b)("em",{parentName:"p"},"dictionary attacks")," or ",Object(r.b)("em",{parentName:"p"},"rainbow table"),": ",Object(r.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-2"}),Object(r.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-2",className:"footnote-ref"}),"2"))),Object(r.b)("h3",{id:"dictionary-attack"},"Dictionary attack"),Object(r.b)("p",null,"Dictionary attack is the simplest form of attack possible on a hash function. We simply store for each possible input the corresponding hash. Then, given a hash, we can look it up in our dictionary, and find the matching input."),Object(r.b)("h3",{id:"rainbow-table"},"Rainbow Table"),Object(r.b)("p",null,"A rainbow table is a linked list of precomputed hash chains used for reversing cryptographic hash functions in order to crack password hashes. Having generated such a table attacks are then carried out by finding the hash and looking it up in the table to find the corresponding plaintext."),Object(r.b)("h2",{id:"solution"},"Solution"),Object(r.b)("p",null,"So, how can we prevent/minimize such attacks? One standard approach is to use a so-called ",Object(r.b)("em",{parentName:"p"},"salt")," in our hashing process."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Salt")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"A salt is random (can be user defined too!) string that is used as an additional input to the one-way hashing function to produce the hash. Typically, a new salt is randomly generated for each password/user."))),Object(r.b)("h2",{id:"hashing-algorithms"},"Hashing algorithms"),Object(r.b)("p",null,"There is a wide variety of hashing function algorithms out there. MD5, SHA-x (e.g. SHA-1, SHA-2 etc.), Bcrypt, Scrypt are just a few to name. Some of these are considered old now (e.g. MD1, SHA-1) and it is advised not to use them. Bcrypt is a safe bet and provides a good well-rounded hashing encryption these days. There are Java implementations of Bcrypt, such as ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/patrickfav/bcrypt"}),"this"),", that you can use in your project if needed."),Object(r.b)("p",null,"Let us assume you want to utlize Bcrypt to handle passwords in your app. First, add the following dependency to your ",Object(r.b)("inlineCode",{parentName:"p"},"build.gradle"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-groovy"}),"implementation 'at.favre.lib:bcrypt:0.9.0'\n")),Object(r.b)("p",null,"Once this is added to your project, you can use Bcrypt to encrypt any string (e.g. password) and/or verify it back. Following is a very simple example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'String password = "1234";\n// STEP 1: hash the password \n// 12 is the cost: the higher this number the more time it takes to produce the hash\nString bcryptHashString = BCrypt.withDefaults().hashToString(12, password.toCharArray()); \n// STEP 2: Verify a password\nResult result = BCrypt.verifyer().verify(password.toCharArray(), bcryptHashString);\n')),Object(r.b)("div",{className:"footnotes"},Object(r.b)("hr",{parentName:"div"}),Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.ionos.com/digitalguide/server/security/rainbow-tables/"}),"https://www.ionos.com/digitalguide/server/security/rainbow-tables/"),Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")),Object(r.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-2"}),Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.commonlounge.com/discussion/2ee3f431a19e4deabe4aa30b43710aa7"}),"https://www.commonlounge.com/discussion/2ee3f431a19e4deabe4aa30b43710aa7"),Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-2",className:"footnote-backref"}),"\u21a9")))))}h.isMDXComponent=!0},185:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=i.a.createContext({}),h=function(e){var t=i.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=h(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=h(a),b=n,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||r;return a?i.a.createElement(m,o(o({ref:t},l),{},{components:a})):i.a.createElement(m,o({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<r;l++)s[l]=a[l];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);