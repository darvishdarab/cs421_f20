(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{136:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return y}));var n=r(0),o=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),l=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,y=u["".concat(a,".").concat(d)]||u[d]||b[d]||i;return r?o.a.createElement(y,s(s({ref:t},c),{},{components:r})):o.a.createElement(y,s({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},93:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return a})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return c}));var n=r(2),o=(r(0),r(136));const i={id:"key_value_persister",title:"Implement a Key-Value Store Persister",sidebar_label:"Key-Value Store Persister"},a={unversionedId:"readings/persistence/key_value_persister",id:"readings/persistence/key_value_persister",isDocsHomePage:!1,title:"Implement a Key-Value Store Persister",description:"We persisted Book objects by writing/reading their properties one after the other. This approach is prone to error because you must make sure your code matches the persisted format for both reading and writing. If you change the Book class - for example, adding an edition field to it - then you may no longer be able to read from old files because some lines could be read into the wrong properties. A potential solution is to save the data as key-value pairs. Java has the Properties class, which you can use to store value strings with associated key strings:",source:"@site/docs\\readings\\persistence\\key_value_persister.md",permalink:"/cs421_f20/docs/readings/persistence/key_value_persister",editUrl:"https://darvishdarab.github.io/cs421_f20/docs/readings/persistence/key_value_persister.md",sidebar_label:"Key-Value Store Persister"},s=[],p={rightToc:s};function c({components:e,...t}){return Object(o.b)("wrapper",Object(n.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"We persisted ",Object(o.b)("inlineCode",{parentName:"p"},"Book")," objects by writing/reading their properties one after the other. This approach is prone to error because you must make sure your code matches the persisted format for both reading and writing. If you change the ",Object(o.b)("inlineCode",{parentName:"p"},"Book")," class - for example, adding an ",Object(o.b)("inlineCode",{parentName:"p"},"edition")," field to it - then you may no longer be able to read from ",Object(o.b)("em",{parentName:"p"},"old files")," because some lines could be read into the wrong properties. A potential solution is to save the data as ",Object(o.b)("strong",{parentName:"p"},"key-value pairs"),". Java has the ",Object(o.b)("inlineCode",{parentName:"p"},"Properties")," class, which you can use to store value strings with associated key strings:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'public class PropertyBookPersister implements Persister<Book>{\n\n  private final static String STORE =  "Book.txt";\n  \n  @Override\n  public void serialize(Book book) throws IOException {\n    Properties p = new Properties();\n\n    p.setProperty("title", book.getTitle());\n    p.setProperty("isbn", book.getIsbn());\n    p.setProperty("publisher", book.getPublisher());\n    p.setProperty("year", Integer.toString(book.getYear()));\n    p.setProperty("author", book.getAuthor());\n\n    FileWriter fw = new FileWriter(STORE);\n    p.store(fw, "comment"); // replace "comment" with any relevant comment!\n    fw.close();\n  }\n\n  @Override\n  public Course deserialize() throws IOException {\n    Properties p = new Properties();\n    FileReader fr = new FileReader(STORE);\n    p.load(fr);\n    fr.close();\n\n    String title = p.getProperty("title");\n    String isbn = p.getProperty("isbn");\n    String publisher = p.getProperty("publisher");\n    String year = p.getProperty("year");\n    String author = p.getProperty("author");\n\n    return new Book(title, isbn, publisher, year, author);\n  }\n  \n}\n')),Object(o.b)("p",null,"Write and run a little demo for this and check out the text file that stores the ",Object(o.b)("inlineCode",{parentName:"p"},"Book")," object."))}c.isMDXComponent=!0}}]);