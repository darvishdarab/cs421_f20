(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(186)),i={id:"mvc",title:"Model-View-Controller Pattern",sidebar_label:"Model-View-Controller"},l={unversionedId:"readings/mvc/mvc",id:"readings/mvc/mvc",isDocsHomePage:!1,title:"Model-View-Controller Pattern",description:"Model\u2013view\u2013controller (usually known as MVC) is a software design pattern that is commonly used for developing web applications. In fact, most web development frameworks (like SparkJava) support this design pattern by default (i.e. they expect you to follow it).",source:"@site/docs\\readings\\mvc\\mvc.md",slug:"/readings/mvc/mvc",permalink:"/cs421_f20/docs/readings/mvc/mvc",editUrl:"https://darvishdarab.github.io/cs421_f20/docs/readings/mvc/mvc.md",version:"current",sidebar_label:"Model-View-Controller",sidebar:"docs",previous:{title:"Testing endpoints with OkHttp",permalink:"/cs421_f20/docs/readings/restful/okhttp"},next:{title:"Template reuse",permalink:"/cs421_f20/docs/readings/mvc/reuse"}},c=[{value:"<code>/</code> View",id:"-view",children:[]},{value:"<code>authors</code> view",id:"authors-view",children:[]},{value:"Controller",id:"controller",children:[]}],s={rightToc:c};function p(e){var t=e.components,i=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Model\u2013view\u2013controller (usually known as MVC) is a software design pattern that is commonly used for developing web applications. In fact, most web development frameworks (like SparkJava) support this design pattern by default (i.e. they expect you to follow it)."),Object(o.b)("p",null,"This pattern is used to separate application's concerns:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Model")," represents an object or JAVA POJO carrying data. "),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"View")," represents the visualization of the data that model contains."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Controller")," is the bridge between the model and view. It controls the data flow into model object and updates the view whenever data changes. ")),Object(o.b)("p",null,Object(o.b)("img",{src:n(218).default})),Object(o.b)("p",null,"In our application, we are building the ",Object(o.b)("em",{parentName:"p"},"Views")," using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://velocity.apache.org/"}),"Apache Velocity")," templates. Add the following to your gradle's dependencies:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-grrovy"}),"implementation 'com.sparkjava:spark-template-velocity:2.7.1'\n")),Object(o.b)("p",null,"So far, we have had three API endpoints, namely ",Object(o.b)("inlineCode",{parentName:"p"},"/"),", ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," and ",Object(o.b)("inlineCode",{parentName:"p"},"addauthor"),', with three separate "views".'),Object(o.b)("h2",{id:"-view"},Object(o.b)("inlineCode",{parentName:"h2"},"/")," View"),Object(o.b)("p",null,"We currently have a homepage which only shows a simple message, let's improve it a little. Save the following file under ",Object(o.b)("inlineCode",{parentName:"p"},"src/main/resources/public/index.html"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">\n    <title>Welcome to MyBooks App</title>\n</head>\n<body>\n    <h1>Welcome to MyBooks App</h1>\n    <div class="divContents indexLinkWrapper">\n        <p><a class="content indexLink" href="/authors">Show all authors</a></p>\n        <p><a class="content indexLink" href="/addauthor">Add author</a></p>\n    </div>\n</body>\n</html>\n')),Object(o.b)("h2",{id:"authors-view"},Object(o.b)("inlineCode",{parentName:"h2"},"authors")," view"),Object(o.b)("p",null,"Now, on to the ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," page; add the following to ",Object(o.b)("inlineCode",{parentName:"p"},"src/main/resources/public/authors.vm"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<!doctype html>\n<html lang="en">\n<head>\n    \x3c!-- Required meta tags --\x3e\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">\n    <title>List of your favorite books\' authors</title>\n</head>\n<body>\n    #if ($authors)\n        <h1>List of the authors of your favorite books:</h1>\n        <div class="divContents">\n            <ol>\n                <p>\n                    #foreach($author in $authors )\n                        <li class="content author"><i>$author.name</i> ($author.nationality) has published $author.numOfBooks books.</li>\n                    #end\n                </p>\n            </ol>\n        </div>\n    #end\n</body>\n</html>\n')),Object(o.b)("p",null,"In particular, note:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"#if ($authors) \n. \n. \n. \n#end\n")),Object(o.b)("p",null,"and the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'#foreach($author in $authors )\n    <li class="content author"><i>$author.name</i> ($author.nationality) has published $author.numOfBooks books.</li>\n#end\n')),Object(o.b)("p",null,"These are Velocity Template Language (VTL) statements. VTL provides an easy way to incorporate dynamic content in a web page. HTML pages are static meaning that their content is fixed, but quite often the content we'd like to present is dynamic. For example, in our ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," view here, we'd like to list all the authors from the ",Object(o.b)("inlineCode",{parentName:"p"},"Authors")," table."),Object(o.b)("p",null,"Using the above VTL statements, we show all the authors inside an ordered HTML list (i.e. ",Object(o.b)("inlineCode",{parentName:"p"},"<ol>"),"), where each author is a list item (i.e. ",Object(o.b)("inlineCode",{parentName:"p"},"<li>"),"). You can see\nthat we iterate through ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," and for each ",Object(o.b)("inlineCode",{parentName:"p"},"author")," in ",Object(o.b)("inlineCode",{parentName:"p"},"authors"),", we show author's name, nationality and numOfBooks e.g. ",Object(o.b)("em",{parentName:"p"},"Leo Tolstoy (Russian) has published 22 books.")," Now, comes the question where to get ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," from? The answer is the ",Object(o.b)("strong",{parentName:"p"},"Model"),". The dynamic data that we'd like to make a part of\nour ",Object(o.b)("strong",{parentName:"p"},"view")," should be stored in the ",Object(o.b)("strong",{parentName:"p"},"model")," objects: ",Object(o.b)("strong",{parentName:"p"},"Controller")," does this!"),Object(o.b)("h2",{id:"controller"},"Controller"),Object(o.b)("p",null,"We must tell our web server to ",Object(o.b)("strong",{parentName:"p"},"route")," to ",Object(o.b)("inlineCode",{parentName:"p"},"authors")," view (i.e. page) when browser is pointed at ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:7000/authors"}),Object(o.b)("inlineCode",{parentName:"a"},"http://localhost:7000/authors")),". Update the following routes in ",Object(o.b)("inlineCode",{parentName:"p"},"Server.main"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'get("/", (req, res) -> {\n            Map<String, Object> model = new HashMap<String, Object>();\n            return new ModelAndView(model, "public/index.html");\n    }, new VelocityTemplateEngine());\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'get("/authors", (req, res) -> {\n            Map<String, Object> model = new HashMap<String, Object>();\n            model.put("authors", new Sql2oAuthorDao(sql2o).listAll());\n            return new ModelAndView(model, "public/authors.vm");\n    }, new VelocityTemplateEngine());\n')),Object(o.b)("p",null,"After running the WebServer, point your browser to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:7000/"}),Object(o.b)("inlineCode",{parentName:"a"},"http://localhost:7000/"))," on the homepage, click on the ",Object(o.b)("em",{parentName:"p"},"Show all authors")," link and you must be redirected to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:7000/authors"}),Object(o.b)("inlineCode",{parentName:"a"},"http://localhost:7000/authors"))," where all authors from ",Object(o.b)("inlineCode",{parentName:"p"},"Authors")," table are listed."))}p.isMDXComponent=!0},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,h=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?r.a.createElement(h,l(l({ref:t},s),{},{components:n})):r.a.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},218:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/mvc-b8e3c2cc9bbcacde3677031d29524b23.png"}}]);