(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{167:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),b=i,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||r;return t?a.a.createElement(m,s(s({ref:n},l),{},{components:t})):a.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var i=t(2),a=t(6),r=(t(0),t(167)),o={id:"injection",title:"SQL injection",sidebar_label:"SQL injection"},s={unversionedId:"readings/security/injection",id:"readings/security/injection",isDocsHomePage:!1,title:"SQL injection",description:"SQL injection, as one of the most common web security vulnerabilities, is a code injection technique that aims to destroy your database. This occurs by inserting (i.e. injecting) malicious sql code into a sql query, typically via a web page input, which is then run by the application against the database.",source:"@site/docs\\readings\\security\\injection.md",permalink:"/cs421_f20/docs/readings/security/injection",editUrl:"https://darvishdarab.github.io/cs421_f20/docs/readings/security/injection.md",sidebar_label:"SQL injection",sidebar:"docs",previous:{title:"Continuous integration with Github Actions",permalink:"/cs421_f20/docs/readings/ci/ci"},next:{title:"Cross site scripting",permalink:"/cs421_f20/docs/readings/security/xss"}},c=[{value:"Prevention",id:"prevention",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"SQL injection"),", as one of the most common web security vulnerabilities, is a code injection technique that aims to destroy your database. This occurs by inserting (i.e. injecting) malicious sql code into a sql query, typically via a web page input, which is then run by the application against the database."),Object(r.b)("p",null,"Let us say we have a simple login form that asks the user to enter a uer name. The entered user name is then made sure to exist in ",Object(r.b)("inlineCode",{parentName:"p"},"Users")," table in the database. If it does, the user is successfully logged in and greeted with a welcome message. Otherwise, the user is prompted again with the login form. The following is the main function that must validate the user: it returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the username is found in the ",Object(r.b)("inlineCode",{parentName:"p"},"Users")," table, false otherwise."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Override\npublic boolean validateUser(User user) throws SQLException {\n    String sql = "SELECT * FROM Users WHERE name= \\"" + user.getUserName() + "\\";";\n    final String URI = "jdbc:sqlite:./DB.db";\n    java.sql.Connection conn = DriverManager.getConnection(URI);\n    Statement st = conn.createStatement();\n    ResultSet rs = st.executeQuery(sql);\n    if (rs.next()) {\n        return true;\n    }\n    return false;\n}\n')),Object(r.b)("p",null,"And here is the code that goes in the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'public static void main(String[] args) {\n    port(7000);\n\n    staticFiles.location("/public");\n\n    get("/", (req, res) -> {\n        Map<String, Object> model = new HashMap<String, Object>();\n        if (req.cookie("username") != null) {\n            model.put("username", req.cookie("username"));\n        }\n        return new ModelAndView(model, "public/index.vm");\n    }, new VelocityTemplateEngine());\n\n    post("/", (req, res) -> {\n        Map<String, Object> model = new HashMap<String, Object>();\n        String userName = req.queryParams("user");\n        String pass = req.queryParams("pass");\n        User user = new User(userName, pass);\n        if (new SQLUsersDao().validateUser(user)) {\n            res.cookie("username", URLEncoder.encode(userName, "UTF-8"));\n        }\n        res.redirect("/");\n        return "";\n    });\n}\n')),Object(r.b)("p",null,"And this is what goes in ",Object(r.b)("inlineCode",{parentName:"p"},"index.vm"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-html"}),'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">\n    <title>Log In!</title>\n</head>\n<div>\n#if($username)\n<h1>Welcome $username</h1>\n<p><div id="keywordDisplay"></div></p>\n<label for="user">Username: </label>\n<input type="text" name="keyword" placeholder="Search Keyword" id="keyword" required/>\n<input type="button" value="search" id="searchbtn" />\n#else\n<h1>Please Login</h1>\n<div class="divContents indexLinkWrapper">\n    <form action="/" method="post" id="login">\n        <label for="user">Username: </label>\n        <input type="text" name="user" placeholder="User Name" id="user" required/>\n        <br/>\n        <input type="submit" value="Sign In!" id="loginbtn" />\n    </form>\n</div>\n#end\n</body>\n</html>\n')),Object(r.b)("p",null,"This all of course is very naive, but it might seem to work fine. In fact, it would work fine under normal conditions but there is actually a big vulnerability that could be easily exploited by a malicious user. Try entering ",Object(r.b)("inlineCode",{parentName:"p"},'name" OR "1"="1')," in the user textbox in the login form. That will let you log in no matter what you put in place of ",Object(r.b)("inlineCode",{parentName:"p"},"name"),". The reason is ",Object(r.b)("inlineCode",{parentName:"p"},'name" OR "1"="1')," will be the user name that gets direcly inserted in the sql query in ",Object(r.b)("inlineCode",{parentName:"p"},"validateUser")," function resulting in the query: ",Object(r.b)("inlineCode",{parentName:"p"},'SELECT * FROM Users WHERE name="name" OR "1"="1"'),". Note that this query matches every single row in the ",Object(r.b)("inlineCode",{parentName:"p"},"Users")," table leading the ",Object(r.b)("inlineCode",{parentName:"p"},"validateUser")," function to return true no matter what to replace ",Object(r.b)("em",{parentName:"p"},'"name"')," with as long as ",Object(r.b)("inlineCode",{parentName:"p"},'" OR "1"="1')," is appended to it. "),Object(r.b)("h2",{id:"prevention"},"Prevention"),Object(r.b)("p",null,"SQL injection is typically preventable easily by ",Object(r.b)("strong",{parentName:"p"},"input sanitization"),":"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(i.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(i.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(i.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Input Sanitization")),Object(r.b)("div",Object(i.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Input Sanitization is the act of checking and modifying the user input (if needed) to prevent it from exploiting security holes."))),Object(r.b)("p",null,"It is certainly NOT a good idea to collect user input and insert it into a sql query (that gets executed against our database) without doing any sort of checks/validations on it. It is therefore sensible to make the following modification to ",Object(r.b)("inlineCode",{parentName:"p"},"validateUser")," function:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-java"}),'@Override\npublic boolean validateUser(User user) throws SQLException {\n    String sql = "SELECT * FROM Users WHERE name = ?";\n\n    final String URI = "jdbc:sqlite:./DB.db";\n    java.sql.Connection conn = DriverManager.getConnection(URI);\n    PreparedStatement st = conn.prepareStatement(sql);\n    st.setString(1, user.getUserName());\n    ResultSet rs = st.executeQuery();\n    if (rs.next()) {\n        return true;\n    }\n    return false;\n}\n')),Object(r.b)("p",null,"Note that we use ",Object(r.b)("inlineCode",{parentName:"p"},"PreparedStatement")," and ",Object(r.b)("inlineCode",{parentName:"p"},"setString")," method to insert the user name into the query. The difference is that ",Object(r.b)("inlineCode",{parentName:"p"},"setString")," sanitizes the input before inserting it into the sql query, preventing injection of harmful data."))}u.isMDXComponent=!0}}]);