(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{140:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),i=(a(0),a(185)),o={id:"persist_objects_in_db",title:"Persist Objects in Databases",sidebar_label:"Persist Objects in Databases"},s={unversionedId:"readings/db/persist_objects_in_db",id:"readings/db/persist_objects_in_db",isDocsHomePage:!1,title:"Persist Objects in Databases",description:"So far, we set up and connected to our SQLite database, and know we need to communicate with it via SQL statements from our Java application. How can we use this arrangement to persist our application's data?",source:"@site/docs\\readings\\db\\persist_objects_in_db.md",slug:"/readings/db/persist_objects_in_db",permalink:"/cs421_f20/docs/readings/db/persist_objects_in_db",editUrl:"https://darvishdarab.github.io/cs421_f20/docs/readings/db/persist_objects_in_db.md",version:"current",sidebar_label:"Persist Objects in Databases",sidebar:"docs",previous:{title:"Creating Content Using JDBC and SQL",permalink:"/cs421_f20/docs/readings/db/sql"},next:{title:"Connecting `Book` and `Author` classes",permalink:"/cs421_f20/docs/readings/db/books_authors_connect"}},c=[{value:"Authors Table",id:"authors-table",children:[]},{value:"Insert data into table",id:"insert-data-into-table",children:[]},{value:"Search for records in a table",id:"search-for-records-in-a-table",children:[]},{value:"Parameterized SQL with JDBC PreparedStatement",id:"parameterized-sql-with-jdbc-preparedstatement",children:[]}],l={rightToc:c};function b(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"So far, we set up and connected to our SQLite database, and know we need to communicate with it via SQL statements from our Java application. How can we use this arrangement to persist our application's data?"),Object(i.b)("p",null,"As noted, relational databases, like SQLite, are structured around tables (similar to those in a document or spreadsheet). Each class in your Java application maps to a different table. The class name maps to the table name. Each property of the class (fields) map to a column in that table. Each object instance corresponds to a row in that table; it holds the values that describe a particular entry."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"In relational databases, we expect each record (row in a table) to be unique. If there is an attribute (column) that can uniquely identify each record, then we are good! That attribute can be identified as the ",Object(i.b)("strong",{parentName:"p"},"primary key")," for that table.",Object(i.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(i.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))," If a table does not have a primary key, you must make one for it by assigning a unique identifier to each row. Usually, this is as simple as having a column that contains a number that increments every time you create a new record."))),Object(i.b)("p",null,"In SQLite, you get a primary key for free, called ",Object(i.b)("inlineCode",{parentName:"p"},"ROWID"),". This is in every SQLite table whether you ask for it or not. ROWID is assigned a value whenever you ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," a row. If you include a column of type ",Object(i.b)("inlineCode",{parentName:"p"},"INTEGER PRIMARY KEY"),", that column points at (is an alias for) the automatic ",Object(i.b)("inlineCode",{parentName:"p"},"ROWID")," column."),Object(i.b)("h2",{id:"authors-table"},"Authors Table"),Object(i.b)("p",null,"When creating a table in SQLite, we can create a ",Object(i.b)("em",{parentName:"p"},"primary key")," ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field for it as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE IF NOT EXISTS Authors (id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE,\n                                    int numOfBooks, nationality VARCHAR(100));\n")),Object(i.b)("p",null,"Accordingly, we must update the ",Object(i.b)("inlineCode",{parentName:"p"},"Author")," class to include an ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field."),Object(i.b)("p",null,Object(i.b)("img",{src:a(308).default})),Object(i.b)("p",null,"Note that we do not provide the ",Object(i.b)("inlineCode",{parentName:"p"},"id")," for ",Object(i.b)("inlineCode",{parentName:"p"},"Author")," (when we construct it). Instead, we let the RDBS generate it for us; we then use ",Object(i.b)("em",{parentName:"p"},"setter")," and ",Object(i.b)("em",{parentName:"p"},"getter")," methods to update/access the ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field."),Object(i.b)("h2",{id:"insert-data-into-table"},"Insert data into table"),Object(i.b)("p",null,"To insert data, we can execute a SQL statement such as:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"INSERT INTO Authors(id, name, numOfBooks, nationality)\n            VALUES (NULL, 'George Orwell', 15, 'British');\n")),Object(i.b)("p",null,"We can reuse the ",Object(i.b)("inlineCode",{parentName:"p"},"Statement")," object (",Object(i.b)("inlineCode",{parentName:"p"},"st"),") to execute the aforementioned ",Object(i.b)("inlineCode",{parentName:"p"},"INSERT")," statement."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"sql = \"INSERT INTO Authors(id, name, numOfBooks, nationality)\"+\n      \"VALUES (NULL, 'George Orwell', 15, 'British');\";\nst.execute(sql);\n")),Object(i.b)("p",null,"Let's insert two more!"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"sql = \"INSERT INTO Authors(id, name, numOfBooks, nationality)\"+\n      \"VALUES (NULL, 'Emily St. John Mandel', 5, 'Canadian');\";\nst.execute(sql);\n\nsql = \"INSERT INTO Authors(id, name, numOfBooks, nationality)\"+\n      \"VALUES (NULL, 'J.D Salinger', 8, 'American');\";\nst.execute(sql);\n")),Object(i.b)("h2",{id:"search-for-records-in-a-table"},"Search for records in a table"),Object(i.b)("p",null,"SQL is particularly powerful when it comes to querying data. Here is a simple example to search for all authors where the author name contains ",Object(i.b)("inlineCode",{parentName:"p"},"el")," characters:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"SELECT * FROM Authors \nWHERE name LIKE '%el%';\n")),Object(i.b)("p",null,"Let's run this query using JDBC:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'sql = "SELECT * FROM Authors WHERE name LIKE \'%el%\';";\nResultSet rs = st.executeQuery(sql);\nwhile (rs.next()) {\n  System.out.println("Author name: " + rs.getString("name"));\n}\n')),Object(i.b)("p",null,"Notice I've used a different method, ",Object(i.b)("inlineCode",{parentName:"p"},"executeQuery")," to run the above SQL statement. The ",Object(i.b)("inlineCode",{parentName:"p"},"executeQuery")," method returns a ",Object(i.b)("inlineCode",{parentName:"p"},"ResultSet")," object which you can iterate over to extract the retrieved data."),Object(i.b)("h2",{id:"parameterized-sql-with-jdbc-preparedstatement"},"Parameterized SQL with JDBC PreparedStatement"),Object(i.b)("p",null,"A JDBC ",Object(i.b)("inlineCode",{parentName:"p"},"PreparedStatement")," is a special kind of JDBC ",Object(i.b)("inlineCode",{parentName:"p"},"Statement")," object with some useful additional features. Namely, it makes it easy to insert ",Object(i.b)("em",{parentName:"p"},"parameters")," into the SQL statement."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'Author a = new Author ("Franz Kafka", 16, "Czechoslovakian");\nString sql = "INSERT INTO Authors (id, name, numOfBooks, nationality)" +\n                          "VALUES (NULL, ?, ?, ?);";\nPreparedStatement pst = conn.prepareStatement(sql);\npst.setString(1, a.getName());\npst.setString(2, String.valueOf(a.getNumOfBooks()));\npst.setString(3, a.getNationality());\npst.execute();\n')),Object(i.b)("div",{className:"footnotes"},Object(i.b)("hr",{parentName:"div"}),Object(i.b)("ol",{parentName:"div"},Object(i.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),"A primary key for a table could be a combination of several columns. This is called ",Object(i.b)("em",{parentName:"li"},"composite")," primary key.",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")))))}b.isMDXComponent=!0},185:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(a),u=n,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return a?r.a.createElement(m,s(s({ref:t},l),{},{components:a})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},308:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/author_with_id-241ebdb302eb0a899f000f2f786e9230.png"}}]);